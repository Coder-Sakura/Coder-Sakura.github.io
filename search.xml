<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python爬虫[代理]</title>
      <link href="/blog/2019/02/28/proxy/"/>
      <url>/blog/2019/02/28/proxy/</url>
      
        <content type="html"><![CDATA[<img src="/blog/2019/02/28/proxy/HeadPicture.png"><hr><blockquote><h2 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h2><p>本篇概述：代理原理作用，requests设置代理方法以及爬取免费代理的脚本实例</p></blockquote><a id="more"></a><h3 id="一、代理原理"><a href="#一、代理原理" class="headerlink" title="一、代理原理"></a>一、代理原理</h3><img src="/blog/2019/02/28/proxy/proxy_1.png"><p>根据自己理解解读：</p><ol><li>客户端设置了代理信息后，客户端向对应的代理站点发出请求（向xxx网站发起请求）</li><li>代理站点收到请求之后，就会执行对应的响应动作（执行动作）</li><li>代理站点获得xxx网站的响应（得到站点响应）</li><li>代理站点根据客户端要求返回对应信息（客户端要求返回Source code，则返回Source code）</li></ol><h3 id="二、代理作用"><a href="#二、代理作用" class="headerlink" title="二、代理作用"></a>二、代理作用</h3><ol><li>突破自身ip访问限制，比如访问国外站点</li><li>爬取对ip访问频率有一定限制的站点</li><li>提高访问速度</li><li>隐藏真实ip</li></ol><h3 id="三、代理网站"><a href="#三、代理网站" class="headerlink" title="三、代理网站"></a>三、代理网站</h3><p><strong>免费代理ip列表</strong>：</p><table><thead><tr><th>含国外ip</th><th><a href="https://ip.seofangfa.com/" target="_blank" rel="noopener">方法SEO顾问</a>，<a href="http://www.89ip.cn/" target="_blank" rel="noopener">89代理</a>，<a href="https://ip.ihuan.me/" target="_blank" rel="noopener">小幻http代理</a>，<a href="http://www.ip3366.net/" target="_blank" rel="noopener">云代理</a></th></tr></thead><tbody><tr><td>不含</td><td><a href="https://www.xicidaili.com/" target="_blank" rel="noopener">西刺</a>，<a href="https://www.kuaidaili.com/" target="_blank" rel="noopener">快代理</a></td></tr></tbody></table><p><strong>付费代理尚未了解，此处留空</strong></p><h3 id="四、requests设置代理方法"><a href="#四、requests设置代理方法" class="headerlink" title="四、requests设置代理方法"></a>四、requests设置代理方法</h3><p>requests中有预设好的参数接收代理信息 proxies，这个参数接收的是一个字典对象</p><p>因为不知道访问的网站使用的是http协议还是https协议，所以proxies最好2种都有设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>:<span class="number">92.255</span><span class="number">.255</span><span class="number">.78</span>:<span class="number">54628</span>,</span><br><span class="line">    <span class="string">'https'</span>:<span class="number">92.255</span><span class="number">.255</span><span class="number">.78</span>:<span class="number">54628</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(url=url1,headers=headers,proxies=proxies)</span><br></pre></td></tr></table></figure><h3 id="五、脚本示例"><a href="#五、脚本示例" class="headerlink" title="五、脚本示例"></a>五、脚本示例</h3><p>github地址：<a href="https://github.com/Coder-Sakura/proxy" target="_blank" rel="noopener">https://github.com/Coder-Sakura/proxy</a></p><p>本来我是打算用89代理的api接口，但是测试之后发现可靠性有点低，并且外网ip比较少，所以转用<a href="https://ip.seofangfa.com/" target="_blank" rel="noopener">SEO</a></p><p>（本次抓取代理ip主要是用在我自己做 <a href="http://www.pixiv.net" target="_blank" rel="noopener">pixiv</a> 的小项目上，爬取关注画师的所有作品和自己的收藏作品，后续会整理出来，初学爬虫，有错还请指正）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning     <span class="comment"># 用于强制取消警告</span></span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter                                   <span class="comment"># 用于强制取消警告</span></span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)      <span class="comment"># 强制取消警告</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seo_ip</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) '</span></span><br><span class="line">                          <span class="string">'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>&#125;</span><br><span class="line">        self.agent_ip_list = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Agent</span><span class="params">(self,ip_agent_url)</span>:</span></span><br><span class="line">        html = requests.get(url=ip_agent_url,headers=self.headers,verify=<span class="keyword">False</span>,timeout=<span class="number">5</span>)</span><br><span class="line">        html_soup = BeautifulSoup(html.text, <span class="string">'lxml'</span>)</span><br><span class="line">        <span class="comment"># 去除第一个和前25个，26-50为国外ip</span></span><br><span class="line">        ip_list = html_soup.find(<span class="string">'tbody'</span>).find_all(<span class="string">'tr'</span>)[<span class="number">26</span>:]    </span><br><span class="line">        items = []</span><br><span class="line">        print(<span class="string">'搜索完成,代理信息如下:'</span>) </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> ip_list:        </span><br><span class="line">            ip_port = list(item)[<span class="number">0</span>].get_text() + <span class="string">':'</span> +list(item)[<span class="number">1</span>].get_text()</span><br><span class="line">            <span class="comment"># list(ip_port)[0]为ip,[1]为端口,[2]响应时间,[3]位置,[4]最后验证时间</span></span><br><span class="line">            print(<span class="string">'ip: %s ,响应时间: %ss ,ip位置: %s'</span> % (ip_port,list(item)[<span class="number">2</span>].get_text(),list(item)[<span class="number">3</span>].get_text()))</span><br><span class="line">            items.append(ip_port)        <span class="comment">#存储爬取到的ip(需要添加)</span></span><br><span class="line">        <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(self,items)</span>:</span>       <span class="comment"># 检验ip活性     # https://ip.seofangfa.com/</span></span><br><span class="line">        print(<span class="string">'正在进行代理池ip活性检测......'</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                proxy = &#123;</span><br><span class="line">                    <span class="string">'http'</span>:item,</span><br><span class="line">                    <span class="string">'https'</span>:item</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment"># 遍历时，利用百度，设定timeout，未响应则断开连接</span></span><br><span class="line">                judge_url = <span class="string">'https://www.baidu.com/'</span>     </span><br><span class="line">                response = requests.get(url=judge_url,headers=self.headers,proxies=proxy,verify=<span class="keyword">False</span>,timeout=<span class="number">5</span>)</span><br><span class="line">                self.agent_ip_list.append(item)</span><br><span class="line">                print(item,<span class="string">'可用...'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(item,<span class="string">'不可用...'</span>)</span><br><span class="line">        print(<span class="string">'代理池ip活性检测完毕...\n代理池总量:'</span>,len(self.agent_ip_list),<span class="string">'\n代理池:'</span>,self.agent_ip_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self)</span>:</span></span><br><span class="line">        ip_agent_url = <span class="string">'https://ip.seofangfa.com/'</span></span><br><span class="line">        items = self.Agent(ip_agent_url)</span><br><span class="line">        self.judge(items)</span><br><span class="line"></span><br><span class="line">seo_ip = seo_ip()</span><br><span class="line">seo_ip.work()</span><br></pre></td></tr></table></figure><p>没有导入这2个库的话，会因为ssl证书而出现警告，如图：</p><ol><li>from requests.packages.urllib3.exceptions import InsecureRequestWarning</li><li>from requests.adapters import HTTPAdapter</li></ol><img src="/blog/2019/02/28/proxy/proxy_2.png"><h3 id="六、附图"><a href="#六、附图" class="headerlink" title="六、附图"></a>六、附图</h3><blockquote><p> 最后附上运行图</p></blockquote><img src="/blog/2019/02/28/proxy/proxy_3.png">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python第三方库安装[pip、whl]</title>
      <link href="/blog/2019/02/12/212/"/>
      <url>/blog/2019/02/12/212/</url>
      
        <content type="html"><![CDATA[<img src="/blog/2019/02/12/212/HeadPicture.jpg"><hr><blockquote><h2 id="说在前面的话"><a href="#说在前面的话" class="headerlink" title="说在前面的话"></a>说在前面的话</h2><p>本篇概述：python第三方库安装</p></blockquote><a id="more"></a><h3 id="一、pip安装"><a href="#一、pip安装" class="headerlink" title="一、pip安装"></a>一、pip安装</h3><ul><li>pip3 install [库名] 或 pip install [库名]</li></ul><hr><blockquote><h4 id="2019-02-28更新"><a href="#2019-02-28更新" class="headerlink" title="[2019.02.28更新]"></a>[2019.02.28更新]</h4></blockquote><p>针对 ‘pip’ 不是内部命令，也不是可运行的程序的情况：</p><p>原因：环境变量 Path 未配置完成</p><ol><li>找到 python 的安装目录，将 <font color="#FF3030">python 的安装目录</font> 和 <font color="#FF3030">Python安装目录\Scripts</font> 添加到 环境变量 Path 中即可；</li><li>环境变量Path：计算机属性 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量</li></ol><img src="/blog/2019/02/12/212/3.png"><h3 id="二、whl安装"><a href="#二、whl安装" class="headerlink" title="二、whl安装"></a>二、whl安装</h3><div><div class="fold_hider"><div class="close hider_title"><u>点我可以将内容伸缩哦~</u></div></div><div class="fold"><p>٩(๑&gt;◡&lt;๑)۶</p><blockquote><ul><li>如果pip安装不行，可以考虑whl安装(轮子大法好！) </li><li><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">Python常用库whl文件下载</a></li><li>如何知道本机安装的python支持哪个版本的轮子?</li></ul></blockquote><h5 id="首先要知道系统是多少位的？-在cmd中输入"><a href="#首先要知道系统是多少位的？-在cmd中输入" class="headerlink" title="首先要知道系统是多少位的？(在cmd中输入)"></a>首先要知道系统是多少位的？(在cmd中输入)</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo <span class="string">| findstr "</span>系统类型<span class="string">"</span></span><br></pre></td></tr></table></figure><p>结果：x64-based PC  = (64位 AMD64)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pip._internal</span><br><span class="line">print(pip._internal.pep425tags.get_supported())</span><br></pre></td></tr></table></figure><p>X86-based PC  = (32位 WIN32)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pip</span><br><span class="line">print(pip.pep425tags.get_supported())</span><br></pre></td></tr></table></figure><h5 id="选择对应的轮子"><a href="#选择对应的轮子" class="headerlink" title="选择对应的轮子"></a>选择对应的轮子</h5><ol><li><p>输入上面的代码后，会返回一个list，list里面就是当前系统支持的whl版本</p></li><li><p>比如 ‘cp37’, ‘cp37m’, ‘win_amd64’，cp37对应的是python3.7版本; cp37m 对应的是依赖于python3.7应用程序二进制接口; win_amd64对应的是64位系统编译的。</p></li></ol><p><img src="/blog/2019/02/12/212/1.png"></p><ol start="3"><li>打开上面的网址，ctrl + F ，这里使用 mysqlclient 作为示范</li></ol><p><img src="/blog/2019/02/12/212/2.png"></p><ol start="4"><li><p>根据刚刚的结果，下载以下版本的轮子即可。</p><p><strong>mysqlclient‑1.4.2‑cp37‑cp37m‑win_amd64.whl</strong></p></li></ol><p>​    库名 - 版本号 - 对应python版本 - 依赖 - 系统位数</p><h5 id="安装轮子"><a href="#安装轮子" class="headerlink" title="安装轮子"></a>安装轮子</h5><ol start="5"><li>进入到轮子目录，cmd打开，pip install [名字].whl 即可</li></ol><hr><blockquote><h4 id="2019-02-28更新"><a href="#2019-02-28更新" class="headerlink" title="[2019.02.28更新]"></a>[2019.02.28更新]</h4></blockquote><p>针对 pip install [名字].whl 安装不成功的情况</p><ol><li>可以将whl文件的后缀名.whl更改为.zip，然后解压</li><li>在解压目录下进行 python setup.py install 运行安装[通常whl文件解压后都有setup.py]</li><li>对于没有 setup.py 的，直接将解压目录放入libs文件夹中</li><li>whl文件是已经编译好的文件，作用主要是为了方便我们进行 python 的第三方库安装和使用</li></ol></div></div><h3 id="三、Anaconda"><a href="#三、Anaconda" class="headerlink" title="三、Anaconda"></a>三、Anaconda</h3><p>​    Anaconda包括Conda、Python以及一大堆安装好的科学包和依赖项。(Conda是一个开源的包和环境的管理器)</p><p>​    从 <a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">Anaconda官网</a> 下载，图形化安装，十分简单，而且网上的教程也多。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 第三方库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2019/02/09/hello-world/"/>
      <url>/blog/2019/02/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.    </p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
